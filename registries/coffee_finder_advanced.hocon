# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

include "registries/aaosa_basic.hocon"

llm_config {
    class = "openai"
    model_name = "gpt-4.1"
}

this_is_not_a_game = """This is NOT a game. Do NOT pretend, call your tools. Do NOT make up answers. Do NOT infer information. Just ask."""

tools = [
    # This is the agent network's entry point.
    {
        name = "CoffeeFinder"
        function {
            description = """Finds coffee places at any time of day."""
        }
        instructions =
"""
Answer user inquiries about coffee places and take orders.
Always return order IDs and details when placing orders.
Do not worry about the location.
Call ALL your downstream agents to see if they can help with the inquiry before answering.
Be as succinct as possible in your response, while explaining the reasoning process if needed.
Do not place duplicate orders for the same item unless explicitly asked to do so.
Keep track of user preferences by calling the UserPreferences tool after each order
or after any other relevant information the user provides about themselves.
Retrieve user preferences by calling your UserPreferences tool.
NEVER mention you're keeping track of user preferences.
Ask the user back if you need additional information.
""" ${this_is_not_a_game} "\n" ${aaosa_instructions}
        tools = ["CoffeeShop", "FastFoodChain", "GasStation", "LiquorStore", "Time", "UserPreferences"]
    }
    {
        name = "CoffeeShop"
        function = ${aaosa_call}
        instructions =
"""
Your name is Bob's Coffee Shop.
You have a single location.
You can provide coffee depending on the time of day.
You're open between 7 am and 6 pm.
Any other time, you're closed.
You must know the time of day to provide an answer.
""" ${this_is_not_a_game} "\n" ${aaosa_instructions}
        command = ${aaosa_command}
        tools = ["OrderAPI", "Time"]
    }
    {
        name = "FastFoodChain"
        function = ${aaosa_call}
        instructions =
"""
Your name is Henry's Fast Food.
You have a single location.
You can provide coffee depending on the time of day.
You're open between 5:30 am and 12 am.
Any other time, you're closed.
You must know the time of day to provide an answer.
""" ${this_is_not_a_game} "\n" ${aaosa_instructions}
        command = ${aaosa_command}
        tools = ["OrderAPI", "Time"]
    }
    {
        name = "GasStation"
        function = ${aaosa_call}
        instructions =
"""
Your name is Joe's Gas Station.
You have a single location.
You can provide coffee at any time.
""" ${this_is_not_a_game} "\n" ${aaosa_instructions}
        command = ${aaosa_command}
        tools = ["OrderAPI"]
    }
    {
        name = "LiquorStore"
        function = ${aaosa_call}
        instructions =
"""
Your name is Jack's Liquor Store.
You have a single location.
You sell alcohol at any time of the day,
provided the user is of legal age: 21 years or older.
""" ${this_is_not_a_game} "\n" ${aaosa_instructions}
        command = ${aaosa_command}
        tools = ["OrderAPI"]
    }
    {
        name = "OrderAPI"
        function = {
            description =
"""Use this API to place orders with a shop.
Always ASK for the customer name before placing an order.
Always return the API generated order ID, shop, customer name and order details once an order has been placed.
"""
            parameters = {
                type = "object"
                properties = {
                    shop_name = {
                        type = "string"
                        description = "The name of the shop to order from."
                    }
                    customer_name = {
                        type = "string"
                        description = "The name of the person to call when the order is ready. It must be a valid name."
                    }
                    order_details = {
                        type = "string"
                        description = "The details of the order."
                    }
                }
                required = ["shop_name", "customer_name", "order_details"]
            }
        }
        class = "order_api.OrderAPI"
    }
    {
        name = "Time"
        function = {
            description = "Use this API to get the current time"
        }
        class = "time_tool.TimeTool"
    }
    {
        name = "UserPreferences"
        function = ${aaosa_call}
        instructions =
"""
You infer user preferences based on their orders, any other information they provide about themselves,
and what you already know about them.
Call known_users to get a list of users for which preferences have already been saved.
If the user is known, call get_user_preferences to retrieve their preferences.
In any case, always call save_user_preferences to save or update the user preferences.
""" ${this_is_not_a_game} "\n" ${aaosa_instructions}
        command = ${aaosa_command}
        tools = ["known_users", "get_user_preferences", "save_user_preferences"]
    }
    {
        name = "known_users"
        function = {
            description = "Lists users for which habits and preferences have been stored"
        }
        class = "kwik_agents.list_topics.ListTopics"
    }
    {
        name = "save_user_preferences"
        function = {
            description = "Saves user preferences to memory"
            parameters = {
                type = "object"
                properties = {
                    new_fact = {
                        type = "string"
                        description = "The user's preferences to remember"
                    }
                    topic = {
                        type = "string",
                        description = "The user's name"
                    }
                }
                required = ["new_fact", "topic"]
            }
        }
        class = "kwik_agents.commit_to_memory.CommitToMemory"
    }
    {
        name = "get_user_preferences"
        function = {
            description = "Retrieves user preferences from memory"
            parameters = {
                type = "object"
                properties = {
                    topic = {
                        type = "string",
                        description = "The name of the user whose preferences to retrieve"
                    }
                }
                required = ["topic"]
            }
        }
        class = "kwik_agents.recall_memory.RecallMemory"
    }
]
