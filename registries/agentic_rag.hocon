
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT
{
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "Agentic RAG Assistant",

            # Note that there are no parameters defined for this guy's "function" key.
            # This is the primary way to identify this tool as a front-man,
            # distinguishing it from the rest of the tools.

            "function": {
                "description": "Answer caller's query with answers from tools.",
            },

            "instructions": """Use your tool to respond to the inquiry.""",
            "tools": ["website_search", "rag_retriever", "slack_tool"]
        },
        # LangChain search tool using Bing; no need to define "function" since "args_schema" is pre-defined.
        {
            "name": "website_search",
            "toolbox": "ddgs_search"
            "args": {
                "num_results": 3
            }
        },
        # RAG tool that loads data from a PDF URL into an in-memory vectorstore and answers queries.
        {
            "name": "rag_retriever",
            "function": {
                "description": "Retrieve information from the given rfp documents",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "Query for retrieval"
                        }
                    },
                    "required": ["query"]
                }
            },
            "class": "rag.Rag"
        },
        # Retrieves messages from a specified Slack channel.
        {
            "name": "slack_tool",
            "function": {
                "description": "Retrieve messages from the given slack channel",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "channel_name": {
                            "type": "string",
                            "description": "slack channel to get messages from"
                        }
                    },
                    "required": ["channel_name"]
                }
            },
            "class": "slack.Slack"
        },
    ]
}
